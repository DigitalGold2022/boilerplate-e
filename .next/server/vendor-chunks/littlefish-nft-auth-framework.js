"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/littlefish-nft-auth-framework";
exports.ids = ["vendor-chunks/littlefish-nft-auth-framework"];
exports.modules = {

/***/ "(ssr)/./node_modules/littlefish-nft-auth-framework/dist/contexts/WalletContext.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/littlefish-nft-auth-framework/dist/contexts/WalletContext.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useWallet = exports.WalletProvider = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _cborJs = _interopRequireDefault(__webpack_require__(/*! cbor-js */ \"(ssr)/./node_modules/cbor-js/cbor.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar WalletContext = /*#__PURE__*/(0, _react.createContext)(null);\nvar useWallet = exports.useWallet = function useWallet() {\n  return (0, _react.useContext)(WalletContext);\n};\nvar WalletProvider = exports.WalletProvider = function WalletProvider(_ref) {\n  var children = _ref.children;\n  var _useState = (0, _react.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  var _useState3 = (0, _react.useState)([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    wallets = _useState4[0],\n    setWallets = _useState4[1];\n  var _useState5 = (0, _react.useState)(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    connectedWalletId = _useState6[0],\n    setConnectedWalletId = _useState6[1];\n  var _useState7 = (0, _react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    utxos = _useState8[0],\n    setUtxos = _useState8[1];\n  var _useState9 = (0, _react.useState)([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    assets = _useState10[0],\n    setAssets = _useState10[1];\n  (0, _react.useEffect)(function () {\n    getWallets();\n  }, [assets]);\n  var expectedWallets = [\"nami\", \"eternl\", \"yoroi\", \"flint\", \"typhon\", \"gerowallet\", \"nufi\", \"lace\"];\n  var assetDecoder = function assetDecoder(hexDataArray) {\n    var results = [];\n    hexDataArray.forEach(function (hexData) {\n      var bytes = new Uint8Array(hexData.match(/[\\da-f]{2}/gi).map(function (h) {\n        return parseInt(h, 16);\n      }));\n      var decoded = _cborJs[\"default\"].decode(bytes.buffer);\n      decoded.forEach(function (utxo) {\n        if (Array.isArray(utxo) && utxo.length === 2 && Array.isArray(utxo[1])) {\n          var _utxo = _slicedToArray(utxo, 2),\n            binaryData = _utxo[0],\n            details = _utxo[1];\n          var _details = _slicedToArray(details, 2),\n            amount = _details[0],\n            _assets = _details[1];\n          var assetResults = [];\n          Object.entries(_assets).forEach(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n              key = _ref3[0],\n              val = _ref3[1];\n            if (typeof key === \"string\") {\n              key = new Uint8Array(key.split(\",\").map(Number));\n            }\n            var keyHex = byteArrayToHex(key);\n            var assetDetail = [keyHex];\n            var details = [];\n            Object.entries(val).forEach(function (_ref4, index, array) {\n              var _ref5 = _slicedToArray(_ref4, 2),\n                innerKey = _ref5[0],\n                innerVal = _ref5[1];\n              if (typeof innerKey === \"string\") {\n                innerKey = new Uint8Array(innerKey.split(\",\").map(Number));\n              }\n              var innerKeyHex = byteArrayToHex(innerKey);\n              //console.log(innerKeyHex, innerVal);\n              assetDetail.push(innerKeyHex, innerVal);\n              //console.log(assetDetail);\n            });\n            assetResults.push(assetDetail);\n            assetResults = assetResults.flat();\n            //console.log(assetResults);\n          });\n          results.push(assetResults);\n          //results = results.flat();\n          //console.log(results)\n        }\n      });\n    });\n    setAssets(results);\n    console.log(results);\n    return results;\n  };\n  function decodeHexToAscii(processedArray) {\n    return processedArray.map(function (item) {\n      var _item = _slicedToArray(item, 3),\n        policyID = _item[0],\n        assetHex = _item[1],\n        amount = _item[2];\n      var assetName = hexToString(assetHex);\n      return [policyID, assetName, amount];\n    });\n  }\n  function hexToString(hex) {\n    var hexes = hex.match(/.{1,2}/g) || [];\n    var result = '';\n    for (var j = 0; j < hexes.length; j++) {\n      result += String.fromCharCode(parseInt(hexes[j], 16));\n    }\n    return result;\n  }\n  var byteArrayToHex = function byteArrayToHex(buffer) {\n    return Array.from(buffer, function (_byte) {\n      return _byte.toString(16).padStart(2, \"0\");\n    }).join(\"\");\n  };\n  function processAssets(inputArray) {\n    var results = [];\n    inputArray.forEach(function (row) {\n      if (row.length === 3) {\n        results.push(row);\n      } else {\n        // Extended processing for longer rows\n        var policyID = row[0]; // Initial policy ID\n        var i = 1; // Start from the second element\n        while (i < row.length) {\n          if (row[i].length === 56 && i + 2 < row.length) {\n            // New policy ID found and there are at least two more items (name and amount)\n            policyID = row[i];\n            i++;\n          }\n          if (i + 1 < row.length) {\n            results.push([policyID, row[i], row[i + 1]]);\n            i += 2; // Move to the next potential asset name\n          } else {\n            // If there's a hanging element without a pair, break the loop\n            break;\n          }\n        }\n      }\n    });\n    return results;\n  }\n  var getWallets = (0, _react.useCallback)(function () {\n    if (typeof window.cardano !== \"undefined\") {\n      var installedWallets = Object.keys(window.cardano);\n      setWallets(expectedWallets.filter(function (wallet) {\n        return installedWallets.includes(wallet);\n      }));\n    }\n    return []; // Ensure that a value is returned even if `window.cardano` is undefined\n  }, [expectedWallets]);\n  var connectWallet = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(walletName) {\n      var api, utxoData, decoded;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Attempting to connect to wallet: \".concat(walletName));\n            if (!(typeof window.cardano !== \"undefined\" && window.cardano[walletName])) {\n              _context.next = 24;\n              break;\n            }\n            _context.prev = 2;\n            _context.next = 5;\n            return window.cardano[walletName].enable({\n              extensions: []\n            });\n          case 5:\n            api = _context.sent;\n            console.log(\"Wallet enabled\", api);\n            setIsConnected(true);\n            setConnectedWalletId(walletName);\n            _context.next = 11;\n            return api.getUtxos();\n          case 11:\n            utxoData = _context.sent;\n            decoded = assetDecoder(utxoData);\n            console.log(decoded);\n            setUtxos(decoded);\n            setAssets(processAssets(decoded)); // Notice the change here from `utxos` to `decoded`\n            console.log(assets);\n            _context.next = 22;\n            break;\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(\"Failed to enable the wallet or fetch UTXOs\", _context.t0);\n          case 22:\n            _context.next = 25;\n            break;\n          case 24:\n            console.error(\"Wallet not found or cardano object not available\");\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 19]]);\n    }));\n    return function (_x) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), [setIsConnected, setConnectedWalletId, setUtxos, setAssets, window.cardano]);\n  var disconnectWallet = (0, _react.useCallback)(function () {\n    console.log(\"Disconnecting wallet...\");\n    setIsConnected(false);\n    setConnectedWalletId(null); // Clear the connected wallet ID upon disconnect\n  }, []);\n  return /*#__PURE__*/_react[\"default\"].createElement(WalletContext.Provider, {\n    value: {\n      isConnected: isConnected,\n      assets: assets,\n      connectedWalletId: connectedWalletId,\n      connectWallet: connectWallet,\n      disconnectWallet: disconnectWallet,\n      decodeHexToAscii: decodeHexToAscii,\n      wallets: wallets\n    }\n  }, children);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/littlefish-nft-auth-framework/dist/contexts/WalletContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/littlefish-nft-auth-framework/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/littlefish-nft-auth-framework/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"WalletProvider\", ({\n  enumerable: true,\n  get: function get() {\n    return _WalletContext.WalletProvider;\n  }\n}));\nObject.defineProperty(exports, \"useWallet\", ({\n  enumerable: true,\n  get: function get() {\n    return _WalletContext.useWallet;\n  }\n}));\nvar _WalletContext = __webpack_require__(/*! ./contexts/WalletContext.js */ \"(ssr)/./node_modules/littlefish-nft-auth-framework/dist/contexts/WalletContext.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl0dGxlZmlzaC1uZnQtYXV0aC1mcmFtZXdvcmsvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw2Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixxQkFBcUIsbUJBQU8sQ0FBQyxzSEFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2xpdHRsZWZpc2gtbmZ0LWF1dGgtZnJhbWV3b3JrL2Rpc3QvaW5kZXguanM/ZmNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldhbGxldFByb3ZpZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9XYWxsZXRDb250ZXh0LldhbGxldFByb3ZpZGVyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVdhbGxldFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfV2FsbGV0Q29udGV4dC51c2VXYWxsZXQ7XG4gIH1cbn0pO1xudmFyIF9XYWxsZXRDb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dHMvV2FsbGV0Q29udGV4dC5qc1wiKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/littlefish-nft-auth-framework/dist/index.js\n");

/***/ })

};
;