/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cbor-js";
exports.ids = ["vendor-chunks/cbor-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/cbor-js/cbor.js":
/*!**************************************!*\
  !*** ./node_modules/cbor-js/cbor.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Patrick Gansterer <paroga@paroga.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n(function(global, undefined) { \"use strict\";\r\nvar POW_2_24 = Math.pow(2, -24),\r\n    POW_2_32 = Math.pow(2, 32),\r\n    POW_2_53 = Math.pow(2, 53);\r\n\r\nfunction encode(value) {\r\n  var data = new ArrayBuffer(256);\r\n  var dataView = new DataView(data);\r\n  var lastLength;\r\n  var offset = 0;\r\n\r\n  function ensureSpace(length) {\r\n    var newByteLength = data.byteLength;\r\n    var requiredLength = offset + length;\r\n    while (newByteLength < requiredLength)\r\n      newByteLength *= 2;\r\n    if (newByteLength !== data.byteLength) {\r\n      var oldDataView = dataView;\r\n      data = new ArrayBuffer(newByteLength);\r\n      dataView = new DataView(data);\r\n      var uint32count = (offset + 3) >> 2;\r\n      for (var i = 0; i < uint32count; ++i)\r\n        dataView.setUint32(i * 4, oldDataView.getUint32(i * 4));\r\n    }\r\n\r\n    lastLength = length;\r\n    return dataView;\r\n  }\r\n  function write() {\r\n    offset += lastLength;\r\n  }\r\n  function writeFloat64(value) {\r\n    write(ensureSpace(8).setFloat64(offset, value));\r\n  }\r\n  function writeUint8(value) {\r\n    write(ensureSpace(1).setUint8(offset, value));\r\n  }\r\n  function writeUint8Array(value) {\r\n    var dataView = ensureSpace(value.length);\r\n    for (var i = 0; i < value.length; ++i)\r\n      dataView.setUint8(offset + i, value[i]);\r\n    write();\r\n  }\r\n  function writeUint16(value) {\r\n    write(ensureSpace(2).setUint16(offset, value));\r\n  }\r\n  function writeUint32(value) {\r\n    write(ensureSpace(4).setUint32(offset, value));\r\n  }\r\n  function writeUint64(value) {\r\n    var low = value % POW_2_32;\r\n    var high = (value - low) / POW_2_32;\r\n    var dataView = ensureSpace(8);\r\n    dataView.setUint32(offset, high);\r\n    dataView.setUint32(offset + 4, low);\r\n    write();\r\n  }\r\n  function writeTypeAndLength(type, length) {\r\n    if (length < 24) {\r\n      writeUint8(type << 5 | length);\r\n    } else if (length < 0x100) {\r\n      writeUint8(type << 5 | 24);\r\n      writeUint8(length);\r\n    } else if (length < 0x10000) {\r\n      writeUint8(type << 5 | 25);\r\n      writeUint16(length);\r\n    } else if (length < 0x100000000) {\r\n      writeUint8(type << 5 | 26);\r\n      writeUint32(length);\r\n    } else {\r\n      writeUint8(type << 5 | 27);\r\n      writeUint64(length);\r\n    }\r\n  }\r\n  \r\n  function encodeItem(value) {\r\n    var i;\r\n\r\n    if (value === false)\r\n      return writeUint8(0xf4);\r\n    if (value === true)\r\n      return writeUint8(0xf5);\r\n    if (value === null)\r\n      return writeUint8(0xf6);\r\n    if (value === undefined)\r\n      return writeUint8(0xf7);\r\n  \r\n    switch (typeof value) {\r\n      case \"number\":\r\n        if (Math.floor(value) === value) {\r\n          if (0 <= value && value <= POW_2_53)\r\n            return writeTypeAndLength(0, value);\r\n          if (-POW_2_53 <= value && value < 0)\r\n            return writeTypeAndLength(1, -(value + 1));\r\n        }\r\n        writeUint8(0xfb);\r\n        return writeFloat64(value);\r\n\r\n      case \"string\":\r\n        var utf8data = [];\r\n        for (i = 0; i < value.length; ++i) {\r\n          var charCode = value.charCodeAt(i);\r\n          if (charCode < 0x80) {\r\n            utf8data.push(charCode);\r\n          } else if (charCode < 0x800) {\r\n            utf8data.push(0xc0 | charCode >> 6);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          } else if (charCode < 0xd800) {\r\n            utf8data.push(0xe0 | charCode >> 12);\r\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          } else {\r\n            charCode = (charCode & 0x3ff) << 10;\r\n            charCode |= value.charCodeAt(++i) & 0x3ff;\r\n            charCode += 0x10000;\r\n\r\n            utf8data.push(0xf0 | charCode >> 18);\r\n            utf8data.push(0x80 | (charCode >> 12)  & 0x3f);\r\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          }\r\n        }\r\n\r\n        writeTypeAndLength(3, utf8data.length);\r\n        return writeUint8Array(utf8data);\r\n\r\n      default:\r\n        var length;\r\n        if (Array.isArray(value)) {\r\n          length = value.length;\r\n          writeTypeAndLength(4, length);\r\n          for (i = 0; i < length; ++i)\r\n            encodeItem(value[i]);\r\n        } else if (value instanceof Uint8Array) {\r\n          writeTypeAndLength(2, value.length);\r\n          writeUint8Array(value);\r\n        } else {\r\n          var keys = Object.keys(value);\r\n          length = keys.length;\r\n          writeTypeAndLength(5, length);\r\n          for (i = 0; i < length; ++i) {\r\n            var key = keys[i];\r\n            encodeItem(key);\r\n            encodeItem(value[key]);\r\n          }\r\n        }\r\n    }\r\n  }\r\n  \r\n  encodeItem(value);\r\n\r\n  if (\"slice\" in data)\r\n    return data.slice(0, offset);\r\n  \r\n  var ret = new ArrayBuffer(offset);\r\n  var retView = new DataView(ret);\r\n  for (var i = 0; i < offset; ++i)\r\n    retView.setUint8(i, dataView.getUint8(i));\r\n  return ret;\r\n}\r\n\r\nfunction decode(data, tagger, simpleValue) {\r\n  var dataView = new DataView(data);\r\n  var offset = 0;\r\n  \r\n  if (typeof tagger !== \"function\")\r\n    tagger = function(value) { return value; };\r\n  if (typeof simpleValue !== \"function\")\r\n    simpleValue = function() { return undefined; };\r\n\r\n  function read(value, length) {\r\n    offset += length;\r\n    return value;\r\n  }\r\n  function readArrayBuffer(length) {\r\n    return read(new Uint8Array(data, offset, length), length);\r\n  }\r\n  function readFloat16() {\r\n    var tempArrayBuffer = new ArrayBuffer(4);\r\n    var tempDataView = new DataView(tempArrayBuffer);\r\n    var value = readUint16();\r\n\r\n    var sign = value & 0x8000;\r\n    var exponent = value & 0x7c00;\r\n    var fraction = value & 0x03ff;\r\n    \r\n    if (exponent === 0x7c00)\r\n      exponent = 0xff << 10;\r\n    else if (exponent !== 0)\r\n      exponent += (127 - 15) << 10;\r\n    else if (fraction !== 0)\r\n      return fraction * POW_2_24;\r\n    \r\n    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\r\n    return tempDataView.getFloat32(0);\r\n  }\r\n  function readFloat32() {\r\n    return read(dataView.getFloat32(offset), 4);\r\n  }\r\n  function readFloat64() {\r\n    return read(dataView.getFloat64(offset), 8);\r\n  }\r\n  function readUint8() {\r\n    return read(dataView.getUint8(offset), 1);\r\n  }\r\n  function readUint16() {\r\n    return read(dataView.getUint16(offset), 2);\r\n  }\r\n  function readUint32() {\r\n    return read(dataView.getUint32(offset), 4);\r\n  }\r\n  function readUint64() {\r\n    return readUint32() * POW_2_32 + readUint32();\r\n  }\r\n  function readBreak() {\r\n    if (dataView.getUint8(offset) !== 0xff)\r\n      return false;\r\n    offset += 1;\r\n    return true;\r\n  }\r\n  function readLength(additionalInformation) {\r\n    if (additionalInformation < 24)\r\n      return additionalInformation;\r\n    if (additionalInformation === 24)\r\n      return readUint8();\r\n    if (additionalInformation === 25)\r\n      return readUint16();\r\n    if (additionalInformation === 26)\r\n      return readUint32();\r\n    if (additionalInformation === 27)\r\n      return readUint64();\r\n    if (additionalInformation === 31)\r\n      return -1;\r\n    throw \"Invalid length encoding\";\r\n  }\r\n  function readIndefiniteStringLength(majorType) {\r\n    var initialByte = readUint8();\r\n    if (initialByte === 0xff)\r\n      return -1;\r\n    var length = readLength(initialByte & 0x1f);\r\n    if (length < 0 || (initialByte >> 5) !== majorType)\r\n      throw \"Invalid indefinite length element\";\r\n    return length;\r\n  }\r\n\r\n  function appendUtf16data(utf16data, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      var value = readUint8();\r\n      if (value & 0x80) {\r\n        if (value < 0xe0) {\r\n          value = (value & 0x1f) <<  6\r\n                | (readUint8() & 0x3f);\r\n          length -= 1;\r\n        } else if (value < 0xf0) {\r\n          value = (value & 0x0f) << 12\r\n                | (readUint8() & 0x3f) << 6\r\n                | (readUint8() & 0x3f);\r\n          length -= 2;\r\n        } else {\r\n          value = (value & 0x0f) << 18\r\n                | (readUint8() & 0x3f) << 12\r\n                | (readUint8() & 0x3f) << 6\r\n                | (readUint8() & 0x3f);\r\n          length -= 3;\r\n        }\r\n      }\r\n\r\n      if (value < 0x10000) {\r\n        utf16data.push(value);\r\n      } else {\r\n        value -= 0x10000;\r\n        utf16data.push(0xd800 | (value >> 10));\r\n        utf16data.push(0xdc00 | (value & 0x3ff));\r\n      }\r\n    }\r\n  }\r\n\r\n  function decodeItem() {\r\n    var initialByte = readUint8();\r\n    var majorType = initialByte >> 5;\r\n    var additionalInformation = initialByte & 0x1f;\r\n    var i;\r\n    var length;\r\n\r\n    if (majorType === 7) {\r\n      switch (additionalInformation) {\r\n        case 25:\r\n          return readFloat16();\r\n        case 26:\r\n          return readFloat32();\r\n        case 27:\r\n          return readFloat64();\r\n      }\r\n    }\r\n\r\n    length = readLength(additionalInformation);\r\n    if (length < 0 && (majorType < 2 || 6 < majorType))\r\n      throw \"Invalid length\";\r\n\r\n    switch (majorType) {\r\n      case 0:\r\n        return length;\r\n      case 1:\r\n        return -1 - length;\r\n      case 2:\r\n        if (length < 0) {\r\n          var elements = [];\r\n          var fullArrayLength = 0;\r\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\r\n            fullArrayLength += length;\r\n            elements.push(readArrayBuffer(length));\r\n          }\r\n          var fullArray = new Uint8Array(fullArrayLength);\r\n          var fullArrayOffset = 0;\r\n          for (i = 0; i < elements.length; ++i) {\r\n            fullArray.set(elements[i], fullArrayOffset);\r\n            fullArrayOffset += elements[i].length;\r\n          }\r\n          return fullArray;\r\n        }\r\n        return readArrayBuffer(length);\r\n      case 3:\r\n        var utf16data = [];\r\n        if (length < 0) {\r\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\r\n            appendUtf16data(utf16data, length);\r\n        } else\r\n          appendUtf16data(utf16data, length);\r\n        return String.fromCharCode.apply(null, utf16data);\r\n      case 4:\r\n        var retArray;\r\n        if (length < 0) {\r\n          retArray = [];\r\n          while (!readBreak())\r\n            retArray.push(decodeItem());\r\n        } else {\r\n          retArray = new Array(length);\r\n          for (i = 0; i < length; ++i)\r\n            retArray[i] = decodeItem();\r\n        }\r\n        return retArray;\r\n      case 5:\r\n        var retObject = {};\r\n        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\r\n          var key = decodeItem();\r\n          retObject[key] = decodeItem();\r\n        }\r\n        return retObject;\r\n      case 6:\r\n        return tagger(decodeItem(), length);\r\n      case 7:\r\n        switch (length) {\r\n          case 20:\r\n            return false;\r\n          case 21:\r\n            return true;\r\n          case 22:\r\n            return null;\r\n          case 23:\r\n            return undefined;\r\n          default:\r\n            return simpleValue(length);\r\n        }\r\n    }\r\n  }\r\n\r\n  var ret = decodeItem();\r\n  if (offset !== data.byteLength)\r\n    throw \"Remaining bytes\";\r\n  return ret;\r\n}\r\n\r\nvar obj = { encode: encode, decode: decode };\r\n\r\nif (true)\r\n  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (obj),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\nelse {}\r\n\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cbor-js/cbor.js\n");

/***/ })

};
;